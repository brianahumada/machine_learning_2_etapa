# -*- coding: utf-8 -*-
"""Clase 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N3jQ2esL8t5rKVbvJDOlPOkav7Gsd_5h

si existe una relación entre la cantidad de horas que tus estudiantes estudian y las calificaciones que obtienen en un examen. Para hacerlo, decides recopilar datos de 20 estudiantes que tomaron un examen recientemente.


Horas de Estudio (X) | Notas del Examen (Y)
---------------------------------------------
      1.0                  60
      2.0                  65
      2.5                  70
      3.0                  75
      3.5                  80
      4.0                  85
      4.5                  90
      5.0                  95
      5.5                  100
      6.0                  105
      6.5                  110
      7.0                  115
      7.5                  120
      8.0                  125
      8.5                  130
      9.0                  135
      9.5                  140
     10.0                  145
     10.5                  150
     11.0                  155 """

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

horas_de_estudio = np.array([1.0, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 10.5, 11.0]).reshape(-1,1)
notas_de_examen = np.array([55, 60, 63, 68, 70, 75, 72, 76, 80, 85, 83, 88, 92, 90, 95, 100, 97, 105, 110, 112])

modelo= LinearRegression()

modelo.fit(horas_de_estudio,notas_de_examen)

notas_predichas= modelo.predict(horas_de_estudio)

plt.figure(figsize=(10, 5))
plt.scatter(horas_de_estudio, notas_de_examen, label='Datos reales', color='blue')

for i in range(len(horas_de_estudio)):
    plt.plot([horas_de_estudio[i],horas_de_estudio[i]],[notas_de_examen[i],notas_de_examen[i]],linestyle="--",color= "green", linewidth= 2)

plt.plot(horas_de_estudio, notas_predichas, label='Regresión Lineal', color='red')
#plt.title(f'Regresión Lineal en Datos Dispersos\nECM: {ecm:.2f}')
plt.xlabel('Horas de Estudio')
plt.ylabel('Notas del Examen')
plt.legend()
plt.grid(True)
plt.show()

# ==============================================================================
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression


# ==============================================================================
# Datos de ejemplo (tamaño en pies cuadrados)
tamanio = np.array([1400, 1600, 1700, 1875, 1100, 1550, 2350, 2450, 1425, 1700])

# ==============================================================================
# Precios correspondientes en dólares
precio = np.array([245000, 312000, 279000, 308000, 199000, 219000, 405000, 324000, 319000, 255000])

# ==============================================================================
# Crear un objeto de modelo de regresión lineal
modelo = LinearRegression()

# ==============================================================================
# Entrenar el modelo con los datos
modelo.fit(tamanio.reshape(-1, 1), precio)
#a=tamanio.reshape(-1, 1)
#print(a)

# ==============================================================================
# Realizar predicciones
tamanio_prediccion = np.array([1600, 1800, 2000])
precio_prediccion = modelo.predict(tamanio_prediccion.reshape(-1, 1))


# ==============================================================================
# Visualizar los resultados
plt.scatter(tamanio, precio, color='blue', label='Datos reales')
plt.plot(tamanio_prediccion, precio_prediccion, color='red', linewidth=2, label='Regresión Lineal')
plt.xlabel('Tamaño (pies cuadrados)')
plt.ylabel('Precio (dólares)')
plt.legend()
plt.title('Regresión Lineal para Predecir el Precio de las Casas')
plt.show()


# ==============================================================================
# Imprimir las predicciones
for i in range(len(tamanio_prediccion)):
    print(f"Para una casa de {tamanio_prediccion[i]} pies cuadrados, el precio estimado es de ${precio_prediccion[i]:.2f}")